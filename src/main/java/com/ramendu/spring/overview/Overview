* Dependency Injection
    + DI is a flavor of Inversion Of Control (IOC)
    + The IOC is a general concept, and it can be expressed in many ways.
    + DI is one concrete example of IOC

    + When writing s complex Java application, application classes should be as independent as possible of other Java
    classes to increase the possibility to reuse these classes and to test them independently of other classes and to test
    them independently of other classes while unit testing. DI helps in gluing these classes together and at the same time
    keeping them independent.


* Spring framework architecture
    + Spring could potentially be one stop shop for all your enterprise applications. However, Spring is modular, allowing
    you to pick and choose which modules are applicable to a scenario, without having to bring in the rest.
    + Spring FW provides about 20 modules which can be used based on an application requirement.

* Core Container
    + Core : This module provides the fundamental parts of the framework including the IOC and DI features.
    + Bean : This module provides BeanFactory, which is a sophisticated implementation of the factory pattern.
    + Context : This module builds on the solid base provided by the core and Bean modules and it is a medium to access
    any objects defined and configured. The ApplicationContext interface is the focal point of the Context Module.
    + SpEL : This modules provides a powerful expression language for querying and manipulating an object graph at runtime.

* Data Access/Integration
    + JDBC : Provides a JDBC abstraction layer that removes the need for tedious JDBC related coding.
    + ORM : Provides integration layers for popular ORM mapping APIs such as JPA, JDO, Hibernate, iBatis etc.
    + OXM : Provides abstraction layer that supports Object/XML mapping implementations for JAXB, Castor, XMLBeans, JiBX and XStream
    + JMS : Provides features for producing and consuming messages.
    + Transaction : Supports programmatic and declarative transaction management for classes that implement special interfaces
    and for all your POJOs.

* Web
    + Web : This module provides basic web oriented integration features such as multi part file upload functionality and the
    initialization of the IOC container using servlet listeners and a web oriented application context.
    + Web-MVC : This module contains Spring's MVC controller implementation for web applications.
    + Web Socket : This module provides support for web socket based two way communication between client and server in web applications.
    + Web portlet : Provides the MVC implementation to be used in a portlet environment and mirrors the functionality of web servlet module.

*